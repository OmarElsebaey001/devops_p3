version: 2.1
commands:
  revert-migrations:
    description: Revert the last migration
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
              if (( 1 ));
              then
                  ls ~/
                  echo =====list of curr dir======
                  ls 
                  cd ~/project/backend
                  npm install
                  npm run migrations:revert
              fi

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environment << parameters.workflow_id >> 
          when: on_fail
          command: |
            echo Destroying the total Env << parameters.workflow_id >> 
            echo "udapeople-frontend-<< parameters.workflow_id >>"
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
            echo ALL ENV WAS DELETED
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0  
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend  
            npm install 
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build  
  build-backend:
    docker:
      - image: circleci/node:13.8.0  
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend  
            npm install 
            npm run build 
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0  
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend  
            npm install 
            npm run test
  test-backend:
    docker:
      - image: circleci/node:13.8.0  
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend  
            npm install 
            npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0  
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          command: |
            cd frontend  
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0  
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            cd backend  
            npm install 
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run:
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople 
      - run:
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run: mkdir -p workspace
      - run:
          command: |
            echo "[web]" > workspace/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text  >> workspace/inventory.txt
      - persist_to_workspace:
          root: workspace
          paths:
            - inventory.txt
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  
  configure-infrastructure:
    docker:
      - image: python:3.8-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["21:6c:9f:dd:e7:bd:1e:80:31:37:15:d0:d6:e8:42:f2"]
      - attach_workspace:
          at: workspace
      - run: 
          name: Printing the IPs
          command: cat workspace/inventory.txt
      - run:
          name: Install Dependencies
          command: |
            apk add --update ansible
            apk add --update python3
      - run: apk upgrade python3
      - run:
          name: Config Server
          command: |
            ansible --version
            ansible-playbook -i workspace/inventory.txt .circleci/ansible/configure-server.yml --private-key udacity.pem
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  run-migrations:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - restore_cache:
            keys: [backend-build]
        - run:
            name: Run migrations
            command: |
              cd backend
              npm install
              npm run migrations > migrations_dump.txt
              ls 
              cat migrations_dump.txt

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_10.x |  bash -
            yum install -y nodejs
            yum -y install tar gzip 
      - attach_workspace:
          at: workspace
      - run:
          name: getting the backend URL
          command: |
            export BACKEND_IP=`cat workspace/inventory.txt | grep "[0-9]" `
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Running the build one last time
          command: |
            npm update
            cd frontend
            npm install
            npm run build
            ls
            echo ================TARING START=============
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  deploy-backend:
    docker:
      - image: python:3.8-alpine
    steps:
      - checkout 
      - add_ssh_keys:
          fingerprints: ["21:6c:9f:dd:e7:bd:1e:80:31:37:15:d0:d6:e8:42:f2"]
      - attach_workspace:
          at: workspace
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update python3
            apk add --update tar
            apk add --update gzip
            apk add --update npm
            apk add --update nodejs
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Copying files
          command: |
            cd backend 
            npm i 
            npm run build 
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            echo "Contents  of the inventory.txt file is -------"
            cat workspace/inventory.txt
            mkdir -p .circleci/ansible/roles/deploy/files
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files/artifact.tar.gz
            ansible-playbook -i workspace/inventory.txt .circleci/ansible/deploy-backend.yml --private-key udacity.pem 
  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_10.x |  bash -
            yum install -y nodejs
            yum -y install tar gzip 
      - attach_workspace:
          at: workspace
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=`cat workspace/inventory.txt | grep "[0-9]" `
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            if curl "${API_URL}/api/status" | grep "ok"
            then
                echo BACKEND PASSED
            else
                echo BACKEND FAILED
                exit 1 
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              echo PASSED FRONTEND SMOKE TEST!!
              exit 0
            else
              echo PASSED FRONTEND SMOKE TEST!!
              exit 1
            fi
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name AppStack \
            --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
      - destroy-environment: 
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
workflows:
    default:
      jobs:
        - build-frontend
        - build-backend
        - test-frontend:
            requires: [build-frontend]
        - test-backend:
            requires: [build-backend]
        - scan-frontend:
            requires: [build-frontend]
        - scan-backend:
            requires: [build-backend]
        - deploy-infrastructure:
            requires: [test-frontend, test-backend, scan-frontend, scan-backend]
        - configure-infrastructure:
            requires: [deploy-infrastructure]
        - run-migrations:
            requires: [configure-infrastructure]
        - deploy-frontend:
            requires: [configure-infrastructure]
        - deploy-backend:
            requires: [configure-infrastructure]
        - smoke-test:
            requires: [deploy-backend,deploy-frontend,run-migrations]
        - cloudfront-update:
            requires: [smoke-test]